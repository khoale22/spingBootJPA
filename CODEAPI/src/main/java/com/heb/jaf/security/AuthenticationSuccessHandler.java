/*
 * com.heb.jaf.security.AuthenticationSuccessHandler
 *
 * Copyright (c) 2014 HEB
 * All rights reserved.
 *
 * This software is the confidential and proprietary information
 * of HEB.
 */

package com.heb.jaf.security;

import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.node.ArrayNode;
import org.codehaus.jackson.node.ObjectNode;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.web.authentication.SimpleUrlAuthenticationSuccessHandler;
import org.springframework.security.web.csrf.CsrfToken;
import org.springframework.stereotype.Component;
import org.springframework.web.util.WebUtils;

import javax.servlet.ServletException;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.io.IOException;
import java.io.PrintWriter;

/**
 * Upon successful authentication, respond back to the client with user roles in JSON.
 *
 * @author p235969
 */
@Component
public class AuthenticationSuccessHandler extends SimpleUrlAuthenticationSuccessHandler {

	private static final String LOGIN_SUCCESS_MESSAGE = "User %s logged in from IP address %s";
	private static final String LOGIN_WITHOUT_ID_ERROR_MESSAGE = "User logged in, but username undefined.";
	private static final String LOGIN_WITHOUT_IP_ERROR_MESSAGE = "User logged in, but IP address is unknown.";

	private static final Logger logger = LoggerFactory.getLogger(AuthenticationSuccessHandler.class);

	/**
	 * This is called by Spring when a user successfully logs in. It sends the user's ID, name, and access permissions
	 * back to the client.
	 *
	 * @param request The HttpServletRequest generated by the login attempt.
	 * @param response The HttpServletResponse to write the user information to.
	 * @param authentication The authentication object holding information about the logged in user.
	 * @throws IOException Any IOException generated in writing the response.
	 * @throws ServletException Any ServletException generated in writing the response.
	 */
	@Override
	public void onAuthenticationSuccess(HttpServletRequest request, HttpServletResponse response,
										Authentication authentication)
			throws IOException, ServletException {

		// we need the principal to pass information back to the client
		// i.e. username and roles
		if (!(authentication.getPrincipal() instanceof HebUserDetails)) {
			throw new IllegalArgumentException("Principal must be an instance of HebUserDetails.");
		}
		HebUserDetails user = (HebUserDetails) authentication.getPrincipal();

		// Log the successful login attempt
		try {
			AuthenticationSuccessHandler.logSuccessfulLogin(user, request);
		} catch (Exception e) {
			AuthenticationSuccessHandler.logger.error(e.getMessage());
		}

		// JSON transformer for user information
		ObjectMapper mapper = new ObjectMapper();
		// we need to transform the roles into a JSON object
		ArrayNode roles = mapper.createArrayNode();
		for (GrantedAuthority authority : user.getAuthorities()) {
			roles.add(authority.getAuthority());
		}

		ObjectNode node = mapper.createObjectNode();
		node.put(JafSecurityConstants.USER_ID_KEY, user.getUsername());
		node.put(JafSecurityConstants.USER_ROLES_KEY, roles);

		node.put(JafSecurityConstants.USER_NAME_KEY, user.getDisplayName());

		// prepare response for JSON consumption
		response.setContentType(JafSecurityConstants.RESPONSE_CONTENT_TYPE);

		CsrfToken csrf = (CsrfToken) request.getAttribute(CsrfToken.class.getName());

		if (csrf != null) {
			Cookie cookie = WebUtils.getCookie(request, CsrfTokenResponseHeaderFilter.ANGULAR_CSRF_COOKIE_NAME);
			String token = csrf.getToken();
			if (cookie==null || token!=null && !token.equals(cookie.getValue())) {
				cookie = new Cookie(CsrfTokenResponseHeaderFilter.ANGULAR_CSRF_COOKIE_NAME, token);
				cookie.setPath("/");
				response.addCookie(cookie);
			}
		}

		PrintWriter writer = response.getWriter();
		writer.print(node);
		writer.flush();
		writer.close();

		// forget what the client did
		clearAuthenticationAttributes(request);
	}

	/**
	 * Logs successful login attempts.
	 *
	 * @param user The User object representing the user who logged in.
	 * @param request The HttpServletRequest created by the login attempt.
	 */
	private static void logSuccessfulLogin(User user, HttpServletRequest request) {
		String userName = user.getUsername();
		if (userName == null) {
			AuthenticationSuccessHandler.logger.error(AuthenticationSuccessHandler.LOGIN_WITHOUT_ID_ERROR_MESSAGE);
			userName = JafSecurityConstants.UNKNOWN_VALUE;
		}
		String ipAddress = request.getRemoteAddr();
		if (ipAddress == null) {
			AuthenticationSuccessHandler.logger.error(AuthenticationSuccessHandler.LOGIN_WITHOUT_IP_ERROR_MESSAGE);
			ipAddress = JafSecurityConstants.UNKNOWN_VALUE;
		}
		AuthenticationSuccessHandler.logger.info(String.format(AuthenticationSuccessHandler.LOGIN_SUCCESS_MESSAGE,
				userName, ipAddress));
	}
}
